import time

from sklearn import svm
from sklearn import tree
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, matthews_corrcoef, f1_score
from sklearn.naive_bayes import GaussianNB
from sklearn.neural_network import MLPClassifier


def run_all_models(data_train, data_test, label_train, label_test):
    print("Naive Bayes")
    elapsed_time, y_pred = run_naive_bayes(data_train, data_test, label_train, label_test)
    print('Finished Run')
    print("Elapsed Time: " + str(elapsed_time) + " seconds")
    print("Classification Report:\n", classification_report(label_test, y_pred, zero_division=0.0, digits=6))
    print("MCC Score: ", matthews_corrcoef(label_test, y_pred))
    print("Weighted F1 Score: ", f1_score(label_test, y_pred, average='weighted'))
    print("Macro F1 Score: ", f1_score(label_test, y_pred, average='macro'))
    print("Micro F1 Score: ", f1_score(label_test, y_pred, average='micro'))

    print("SVM")
    elapsed_time, y_pred = run_svm(data_train, data_test, label_train, label_test)
    print('Finished Run')
    print("Elapsed Time: " + str(elapsed_time) + " seconds")
    print("Classification Report:\n", classification_report(label_test, y_pred, zero_division=0.0, digits=6))
    print("MCC Score: ", matthews_corrcoef(label_test, y_pred))
    print("Weighted F1 Score: ", f1_score(label_test, y_pred, average='weighted'))
    print("Macro F1 Score: ", f1_score(label_test, y_pred, average='macro'))
    print("Micro F1 Score: ", f1_score(label_test, y_pred, average='micro'))

    print("Decision Tree")
    elapsed_time, y_pred = run_decision_tree(data_train, data_test, label_train, label_test)
    print('Finished Run')
    print("Elapsed Time: " + str(elapsed_time) + " seconds")
    print("Classification Report:\n", classification_report(label_test, y_pred, zero_division=0.0, digits=6))
    print("MCC Score: ", matthews_corrcoef(label_test, y_pred))
    print("Weighted F1 Score: ", f1_score(label_test, y_pred, average='weighted'))
    print("Macro F1 Score: ", f1_score(label_test, y_pred, average='macro'))
    print("Micro F1 Score: ", f1_score(label_test, y_pred, average='micro'))

    print("MLP")
    elapsed_time, y_pred = run_mlp(data_train, data_test, label_train, label_test)
    print('Finished Run')
    print("Elapsed Time: " + str(elapsed_time) + " seconds")
    print("Classification Report:\n", classification_report(label_test, y_pred, zero_division=0.0, digits=6))
    print("MCC Score: ", matthews_corrcoef(label_test, y_pred))
    print("Weighted F1 Score: ", f1_score(label_test, y_pred, average='weighted'))
    print("Macro F1 Score: ", f1_score(label_test, y_pred, average='macro'))
    print("Micro F1 Score: ", f1_score(label_test, y_pred, average='micro'))

    print("Random Forest")
    elapsed_time, y_pred = run_random_forest(data_train, data_test, label_train, label_test)
    print('Finished Run')
    print("Elapsed Time: " + str(elapsed_time) + " seconds")
    print("Classification Report:\n", classification_report(label_test, y_pred, zero_division=0.0, digits=6))
    print("MCC Score: ", matthews_corrcoef(label_test, y_pred))
    print("Weighted F1 Score: ", f1_score(label_test, y_pred, average='weighted'))
    print("Macro F1 Score: ", f1_score(label_test, y_pred, average='macro'))
    print("Micro F1 Score: ", f1_score(label_test, y_pred, average='micro'))
    return None


def run_naive_bayes(data_train, data_test, label_train, label_test):
    start = time.time()
    print('Starting Run')

    nb = GaussianNB(var_smoothing=1e-12).fit(data_train, label_train)
    elapsed_time = time.time() - start
    print("Score: ", nb.score(data_test, label_test))

    y_pred = nb.predict(data_test)

    return elapsed_time, y_pred


def run_svm(data_train, data_test, label_train, label_test):
    start = time.time()
    print('Starting run')

    model = svm.LinearSVC(verbose=True, dual="auto").fit(data_train, label_train)
    elapsed_time = time.time() - start
    print("Score: ", model.score(data_test, label_test))

    y_pred = model.predict(data_test)

    return elapsed_time, y_pred


def run_decision_tree(data_train, data_test, label_train, label_test):
    start = time.time()
    print('Starting run')

    model = tree.DecisionTreeClassifier(criterion="log_loss").fit(data_train, label_train)
    elapsed_time = time.time() - start
    print("Score: ", model.score(data_test, label_test))

    y_pred = model.predict(data_test)

    return elapsed_time, y_pred


def run_mlp(data_train, data_test, label_train, label_test):
    start = time.time()
    print('Starting run')

    model = MLPClassifier(solver='adam', alpha=1e-5, learning_rate='constant', verbose=True).fit(data_train,
                                                                                                 label_train)
    elapsed_time = time.time() - start
    print("Score: ", model.score(data_test, label_test))

    y_pred = model.predict(data_test)

    return elapsed_time, y_pred


def run_random_forest(data_train, data_test, label_train, label_test):
    start = time.time()
    print('Starting run')

    model = RandomForestClassifier(verbose=True, n_jobs=1, n_estimators=10, criterion="log_loss").fit(data_train,
                                                                                                      label_train)
    elapsed_time = time.time() - start
    print("Score: ", model.score(data_test, label_test))

    y_pred = model.predict(data_test)

    return elapsed_time, y_pred